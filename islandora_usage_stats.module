<?php

/**
 * @file
 * Primary hook implementations.
 */

// Permissions.
define('ISLANDORA_USAGE_STATS_VIEW_REPORTS', 'view islandora usage stats reports');

/**
 * Implements hook_block_info().
 */
function islandora_usage_stats_block_info() {
  $blocks = array();

  $blocks['top_usage'] = array(
    'info' => t('Most Viewed Islandora Items'),
  );
  $blocks['recent_activity'] = array(
    'info' => t('Recently accessed Islandora Items'),
  );
  $blocks['top_search'] = array(
    'info' => t('Most Searched Terms'),
  );
  $blocks['top_downloads'] = array(
    'info' => t('Recently downloaded items'),
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function islandora_usage_stats_block_configure($delta) {
  $form = array();

  switch ($delta) {
    case 'top_usage':
      if (user_access('manage usage stats')) {
        $form['islandora_usage_stats_block_display_rows'] = array(
          '#type' => 'textfield',
          '#title' => t('Configure Number of Rows to Display'),
          '#size' => 5,
          '#description' => t('Enter the number of rows to display in the block.'),
          '#default_value' => variable_get('islandora_usage_stats_block_display_rows', 5),
        );

        $form['islandora_usage_stats_block_exclusion'] = array(
          '#type' => 'fieldset',
          '#title' => t('Omit PIDs from block display'),
          '#description' => t('Add Islandora PIDs that you want to omit from being displayed in the block'),
        );

        $form['islandora_usage_stats_block_exclusion']['islandora_usage_stats_exclusion_list'] = array(
          '#type' => 'textarea',
          '#description' => t('Add Islandora PIDs separated by spaces'),
          '#default_value' => variable_get('islandora_usage_stats_block_exclusion_list', 'islandora:root'),
        );
      }
      break;

    case 'recent_activity':
      if (user_access('manage usage stats')) {
        $form['islandora_usage_stats_recent_activity_block_display_rows'] = array(
          '#type' => 'textfield',
          '#title' => t('Configure Number of Rows to Display'),
          '#size' => 5,
          '#description' => t('Enter the number of rows to display in the block.'),
          '#default_value' => variable_get('islandora_usage_stats_recent_activity_block_display_rows', 5),
        );

        $form['islandora_usage_stats_recent_activity_block_exclusion'] = array(
          '#type' => 'fieldset',
          '#title' => t('Omit PIDs from block display'),
          '#description' => t('Add Islandora PIDs that you want to omit from being displayed in the block'),
        );

        $form['islandora_usage_stats_recent_activity_block_exclusion']['islandora_usage_stats_recent_activity_block_exclusion_list'] = array(
          '#type' => 'textarea',
          '#description' => t('Add Islandora PIDs separated by spaces'),
          '#default_value' => variable_get('islandora_usage_stats_recent_activity_block_exclusion_list', 'islandora:root'),
        );
      }
      break;

    case 'top_downloads':
      if (user_access('manage usage stats')) {
        $form['islandora_usage_stats_top_downloads_block_display_rows'] = array(
          '#type' => 'textfield',
          '#title' => t('Configure Number of Rows to Display'),
          '#size' => 5,
          '#description' => t('Enter the number of rows to display in the block.'),
          '#default_value' => variable_get('islandora_usage_stats_top_downloads_block_display_rows', 5),
        );
      }
      break;

    case 'top_search':
      if (user_access('manage usage stats')) {
        $form['islandora_usage_stats_top_search_block_display_rows'] = array(
          '#type' => 'textfield',
          '#title' => t('Configure Number of Rows to Display'),
          '#size' => 5,
          '#description' => t('Enter the number of rows to display in the block.'),
          '#default_value' => variable_get('islandora_usage_stats_top_search_block_display_rows', 5),
        );
      }
      break;

  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function islandora_usage_stats_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'top_usage':
      variable_set('islandora_usage_stats_block_display_rows', (int) $edit['islandora_usage_stats_block_display_rows']);
      variable_set('islandora_usage_stats_block_exclusion_list', $edit['islandora_usage_stats_exclusion_list']);
      break;

    case 'recent_activity':
      variable_set('islandora_usage_stats_recent_activity_block_display_rows', (int) $edit['islandora_usage_stats_recent_activity_block_display_rows']);
      variable_set('islandora_usage_stats_recent_activity_block_exclusion_list', $edit['islandora_usage_stats_recent_activity_block_exclusion_list']);
      break;

    case 'top_downloads':
      variable_set('islandora_usage_stats_top_downloads_block_display_rows', (int) $edit['islandora_usage_stats_top_downloads_block_display_rows']);
      break;

    case 'top_search':
      variable_set('islandora_usage_stats_top_search_block_display_rows', (int) $edit['islandora_usage_stats_top_search_block_display_rows']);
      break;
  }
}

/**
 * Implements hook_block_view().
 */
function islandora_usage_stats_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'top_usage':
      if (user_access('view usage stats block')) {
        module_load_include('inc', 'islandora_usage_stats', 'includes/db');
        $connection = islandora_get_tuque_connection();
        $repository = $connection->repository;

        $result = islandora_usage_stats_get_most_viewed(
          variable_get('islandora_usage_stats_block_display_rows', 5),
          explode(
            ' ',
            variable_get('islandora_usage_stats_block_exclusion_list', 'islandora:root')
          )
        );
        $items = array();
        foreach ($result as $row) {
          // @XXX This object load can fail perms, or not exist.
          $object = islandora_object_load($row->pid);
          $view_suffix = ((int) $row->views > 1) ? 'views' : 'view';
          $viewcount = "$row->views $view_suffix";
          $items[] = array(
            'data' => l($object->label, 'islandora/object/' . urlencode($row->pid)) . " <span class='label label-default'>" . $viewcount . '</span>',
            'class' => array('list-group-item'),
          );
        }
        return array(
          'content' => array(
            '#markup' => theme(
              'item_list',
              array(
                'items' => $items,
                'attributes' => array('class' => array('list-group')),
              )
            ),
          ),
        );
      }
      break;

    case 'recent_activity':
      if (user_access('view usage stats block')) {
        module_load_include('inc', 'islandora_usage_stats', 'includes/db');
        $result = islandora_usage_stats_get_recently_viewed(
          variable_get('islandora_usage_stats_recent_activity_block_display_rows', 5),
          explode(
            ' ',
            variable_get('islandora_usage_stats_recent_activity_block_exclusion_list', 'islandora:root')
          )
        );
        $items = array();
        foreach ($result as $pid) {
          // @XXX This object load can fail perms, or not exist.
          $object = islandora_object_load($pid);
          $items[] = array(
            'data' => l($object->label, 'islandora/object/' . urlencode($pid)),
            'class' => array(
              'list-group-item',
            ),
          );
        }
        return array(
          'content' => array(
            '#markup' => theme(
              'item_list',
              array(
                'items' => $items,
                'attributes' => array(
                  'class' => array(
                    'list-group',
                  ),
                ),
              )
            ),
          ),
        );
      }
      break;

    case 'top_downloads':
      if (user_access('view usage stats block')) {
        module_load_include('inc', 'islandora_usage_stats', 'includes/db');
        $result = islandora_usage_stats_get_top_downloads(
          variable_get('islandora_usage_stats_top_downloads_block_display_rows', 5)
        );
        $items = array();
        foreach ($result as $pid) {
          // @XXX This object load can fail perms, or not exist.
          $object = islandora_object_load($pid);
          $items[] = array(
            'data' => l($object->label, 'islandora/object/' . urlencode($pid)),
            'class' => array(
              'list-group-item',
            ),
          );
        }
        return array(
          'content' => array(
            '#markup' => theme('item_list', array(
              'items' => $items,
              'attributes' => array(
                'class' => array(
                  'list-group',
                ),
              ),
            )),
          ),
        );
      }
      break;

    case 'top_search':
      if (user_access('view usage stats block')) {
        module_load_include('inc', 'islandora_usage_stats', 'includes/db');
        $results = islandora_usage_stats_get_top_searched(
          variable_get('islandora_usage_stats_top_search_block_display_rows', 5));
        $items = array();
        foreach ($results as $result) {
          $term = $result->term;
          $options = array('query' => array('type' => 'dismax'));
          $items[] = array(
            'data' => l($result->term, "islandora/search/$term", $options),
            'class' => array(
              'list-group-item',
            ),
          );
        }
        return array(
          'content' => array(
            '#markup' => theme('item_list', array(
              'items' => $items,
              'attributes' => array(
                'class' => array(
                  'list-group',
                ),
              ),
            )),
          ),
        );
      }
      break;

  }
}

/**
 * Implements hook_menu().
 */
function islandora_usage_stats_menu() {
  $items = array();

  // Internal route with 2 wildcard matches.
  $items['download_ds/%/%'] = array(
    'title' => 'Download datastream',
    'page callback' => 'islandora_usage_stats_download_ds_form',
    'page arguments' => array(1, 2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/islandora/tools/islandora_usage_stats'] = array(
    'title' => 'Islandora Usage Stats Settings',
    'description' => 'Change how usage stats behave.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_usage_stats_admin_settings'),
    'access arguments' => array('manage usage stats'),
    'file' => 'includes/admin.form.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function islandora_usage_stats_permission() {
  return array(
    'manage usage stats' => array(
      'title' => t('Manage usage tracking'),
      'description' => t('Manage usage tracking for the Islandora Usage Stats module'),
    ),
    'view usage stats block' => array(
      'title' => t('View usage tracking stats block'),
      'description' => t('View usage tracking stats block which includes number of views and downloads'),
    ),
    ISLANDORA_USAGE_STATS_VIEW_REPORTS => array(
      'title' => t('View Islandora Usage Reports'),
      'description' => t('View reports generated by Islandora Usage Statistics, this does not respect XACML.'),
    ),
  );
}

/**
 * Form called when paths with link 'download_ds/$pid/$dsid' are clicked.
 */
function islandora_usage_stats_download_ds_form($pid, $dsid) {
  $object = islandora_object_load($pid);

  if (!$object) {
    drupal_set_message(t('Object could not be loaded from islandora!'));
    return;
  }

  $sanitized_label = preg_replace('/[^A-Za-z0-9_\-]|\.pdf$/', '_', $object->label);
  $download_url = 'islandora/object/' . $object->id . '/datastream/OBJ/download/' . $sanitized_label . '.pdf';

  $datastream = $object[$dsid];

  drupal_set_message($sanitized_label);

  if (!$datastream) {
    drupal_set_message(t('Could not get datastream, id: ' . $pid . ' , dsid: ' . $dsid));
    return;
  }

  $mime_type = $datastream->mimeType;

  if (!$mime_type) {
    drupal_set_message(t('Could not get mimetype'));
    return;
  }

  $extension = system_mime_type_extension($mime_type);

  $file = $datastream->getContent($file);

  $ds_name = $datastream->id;

  // Track the download.
  $track = new IslandoraUsageStats($pid);
  // Increase data stream tracking number by 1.
  $result = $track->addDownload($ds_name);
  $object_array = array(
    'object' => $object,
    'label' => $sanitized_label,
    'download_url' => $download_url,
    'datastream' => $datastream,
    'ds_name' => $ds_name,
    'mime_type' => $mime_type,
    'extension' => $extension,
    'tracking' => $result
  );

  // Create custom hook that other modules can implement.
  module_invoke_all('islandora_datastream_download', $object_array);

  // Redirect to the file or error.
  if ($file) {
    drupal_add_http_header('Content-type', $mime_type);
    drupal_add_http_header('Content-Disposition', 'attachment; filename' . $sanitized_label);
    echo $file;
    exit();
  }
  else {
    drupal_set_message(t('Specified file does not exist!'));
  }
}

/**
 * Implements hook_islandora_datastream_download().
 */
function islandora_usage_stats_islandora_datastream_download($object_array) {
  drupal_set_message($object_array['mime_type']);
}

/**
 * Returns the system MIME type mapping of MIME types to extensions.
 *
 *  MIME types extensions as defined in /etc/mime.types
 * (considering the first extension listed to be canonical).
 */
function system_mime_type_extensions() {
  $out = array();
  $file = fopen('/etc/mime.types', 'r');
  while (($line = fgets($file)) !== FALSE) {
    $line = trim(preg_replace('/#.*/', '', $line));
    if (!$line) {
      continue;
    }
    $parts = preg_split('/\s+/', $line);
    if (count($parts) == 1) {
      continue;
    }
    $type = array_shift($parts);
    if (!isset($out[$type])) {
      $out[$type] = array_shift($parts);
    }
  }
  fclose($file);
  return $out;
}

/**
 * Returns the canonical file extension for the MIME type specified.
 *
 * MIME type specified as defined in /etc/mime.types
 * (considering the first extension listed to be canonical).
 *
 * @param string $type
 *   The MIME type
 *
 * @return Ambigous
 *   <NULL, unknown> MIME type extensions result.
 */
function system_mime_type_extension($type) {
  static $exts;
  if (!isset($exts)) {
    $exts = system_mime_type_extensions();
  }
  return isset($exts[$type]) ? $exts[$type] : NULL;
}

/**
 * Implements hook_islandora_object_purged().
 */
function islandora_usage_stats_islandora_object_purged($pid) {
  module_load_include('inc', 'islandora_usage_stats', 'includes/db');
  $purge_tables = array(
    'islandora_usage_stats_object_views',
    'islandora_usage_stats_object_ds_downloads',
    'islandora_usage_stats_object_access_log',
    'islandora_usage_stats_object_ds_access_log',
    'islandora_usage_stats_objects',
  );
  foreach ($purge_tables as $table) {
    islandora_usage_stats_clear_tracking($table, $pid);
  }
}

/**
 * Implements hook_islandora_view_object().
 *
 * Tracks usage stats.
 */
function islandora_usage_stats_islandora_view_object($object) {
  $track = new IslandoraUsageStats($object->id);
  $track->plusOneView();
}

/**
 * Implements hook_preprocess_theme().
 */
function islandora_usage_stats_preprocess_islandora_pdf(&$variables) {
  if (variable_get('islandora_usage_stats_alter_pdf_display', FALSE)) {
    $islandora_object = $variables['islandora_object'];
    $id = $islandora_object->id;
    $label = $islandora_object->label;

    $track = new IslandoraUsageStats($id);
    $variables['time_last_viewed'] = $track->getLastViewedTime();

    $currentStats = $track->getViewCount();
    $variables['times_viewed'] = $currentStats['views'];

    $downloaded = $track->getDownloads('OBJ');

    $variables['times_downloaded'] = $downloaded['downloads'];
    $variables['time_last_downloaded'] = $downloaded['time'];

    $variables['islandora_download_link'] = l(
      '<i class="glyphicon glyphicon-download"> ' . t('Download PDF') . '</i>',
      "download_ds/$id/OBJ/$label",
      array(
        'attributes' => array('class' => 'btn btn-primary'),
        'html' => TRUE,
      )
    );
  }
}

/**
 * Implements hook_views_api().
 */
function islandora_usage_stats_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'islandora_usage_stats') . '/views',
  );
}

/**
 * Implements hook_islandora_object_alter().
 *
 * Using alter because of the ordering bug in hook_islandora_object_modify().
 */
function islandora_usage_stats_islandora_object_alter(AbstractObject $object, &$context) {
  module_load_include('inc', 'islandora_usage_stats', 'includes/db');
  if (isset($context['params']['label'])) {
    islandora_usage_stats_update_object_label($object->id, $context['params']['label']);
  }
}

/**
 * Implements hook_menu_alter().
 */
function islandora_usage_stats_menu_alter(&$items) {
  $path = "/includes/callbacks.inc";
  $items['islandora/search']['page callback'] = 'islandora_usage_stats_track_search_results';
  $items['islandora/search']['file'] = $path;
  $items['islandora/search']['module'] = "islandora_usage_stats";
  $items['islandora/object/%islandora_object/datastream/%islandora_datastream/download']['page callback']
    = 'islandora_usage_stats_track_downloads';
  $items['islandora/object/%islandora_object/datastream/%islandora_datastream/download']['file']
    = $path;
  $items['islandora/object/%islandora_object/datastream/%islandora_datastream/download']['module']
    = "islandora_usage_stats";
}
